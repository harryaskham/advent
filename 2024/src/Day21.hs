module Day21 where

{-
+---+---+---+
\| 7 | 8 | 9 |
+---+---+---+
\| 4 | 5 | 6 |
+---+---+---+
\| 1 | 2 | 3 |
+---+---+---+
    | 0 | A |
    +---+---+

    +---+---+
    | ^ | A |
+---+---+---+
\| < | v | > |
+---+---+---+

for each pad, get all distances between nodes
state is (loc, loc, loc, numloc, totalspend)
heirusitc is manhattan on numpad ‚Üí

or propagate back; for each num-to-num, we get many expansions
each one leaves the two robots in different positions
cost of inputting a 0:
all paths of moving r2 from r2loc to 0

-}

import Control.Lens (makeLenses, use, view, (%=), (.=), (?~))
import Data.Map.Strict qualified as M
import Data.Variant
import Data.Variant.Types
import GHC.TypeLits

type Numpad = ".A0123456789"

type Dirpad = ".A^v<>"

type Paths cs = (Cell cs, Cell cs) :|-> [[Cell Dirpad]]

paths :: (SChar '.' :< SymSChars cs, Ord (Cell cs), GridCell (Cell cs)) => cs ‚ñ¶ ‚Ñ§¬≤ -> Paths cs
paths g =
  firstPaths ‚àò sortOn size <$> foldr1 (M.unionWith (<>)) ([ps c d | c <- coords g, d <- coords g, g |! c ‚â¢ (#"." ‚ñ°), g |! d ‚â¢ (#"." ‚ñ°)])
  where
    firstPaths [] = []
    firstPaths allPaths@(firstPath : _) = takeWhile ((‚â° size firstPath) ‚àò size) allPaths
    -- removeDots paths =
    --   mkMapWith
    --     (<>)
    --     [ ((from, to), [path])
    --       | ((from, to), paths) <- unMap paths,
    --         let fromP = g |!> from,
    --         let visited path = fst $ foldl' (\(vs, c) dir -> ((g |! c) : vs, move @‚Ñ§ (toDir¬≤ dir) 1 c)) ([], fromP) path,
    --         path <- paths,
    --         let vs = visited path,
    --         let valid = not (any ((‚â° (#"." ‚ñ°))) vs),
    --         traceShow ("from/to/path/visits/valid", toChar from, toChar to, toChar <$> path, toChar <$> vs, valid) $ valid
    --     ]

    init = mkMap [((c, d), []) | c <- cells g, d <- cells g, c ‚â¢ (#"." ‚ñ°), d ‚â¢ (#"." ‚ñ°)]
    ps s e = go s (mk‚ÇÅ (s, []))
      where
        go s Empty = init
        go s ((c, dirs) :<| q)
          | g |! c ‚â° (#"." ‚ñ°) = go s q
          | c ‚â° e =
              traceShow ("found e", toChar start, toChar end, dirs) $
                go s q |~ ((start, end), (dirs :))
          | size dirs >= ((+) $@ gridDims g) - 2 = go s q
          | otherwise =
              let ns = [(n, dirs <> [fromDir¬≤ dir]) | dir <- enumerate, let n = move @‚Ñ§ dir 1 c, n ‚àà g, g |! n ‚â¢ (#"." ‚ñ°)]
               in traceShow ("moving from", c, dirs, "neighs", ns, toChar ‚àò (g |!) . fst <$> ns) $
                    go s (q >< mk ns)
          where
            start = g |! s
            end = g |! e

numpad :: Numpad ‚ñ¶ ‚Ñ§¬≤
numpad =
  readGrid $
    [txt|789
         456
         123
         .0A|]

numpaths :: Paths Numpad
numpaths = paths numpad

dirpad :: Dirpad ‚ñ¶ ‚Ñ§¬≤
dirpad =
  readGrid $
    [txt|.^A
         <v>|]

fromDir¬≤ :: Dir¬≤ -> Cell Dirpad
fromDir¬≤ = fromChar ‚àò toArrow¬≤

toDir¬≤ :: Cell Dirpad -> Dir¬≤
toDir¬≤ = fromArrow¬≤ ‚àò toChar

dirpaths :: Paths Dirpad
dirpaths = paths dirpad

data St = St
  { _presses :: [Cell Dirpad],
    _target :: Cell Numpad,
    _entered :: Maybe (Cell Numpad),
    _rsP :: [‚Ñ§¬≤],
    _rnumP :: ‚Ñ§¬≤
  }
  deriving (Eq, Ord, Show)

makeLenses ''St

initSt :: ‚Ñ§ -> St
initSt layers =
  St
    { _presses = [],
      _target = (#A ‚ñ°),
      _entered = Nothing,
      _rsP = replicate (fromIntegral layers) (dirpad |!> (#A ‚ñ°)),
      _rnumP = numpad |!> (#A ‚ñ°)
    }

toButtonsValue :: Text -> ([Cell Numpad], ‚Ñ§)
toButtonsValue code =
  let cs = unpack code
   in ([fromChar c | c <- cs], take 3 cs |- number)

ix‚Ñ§ i = ix (fromIntegral i)

h :: St -> ‚Ñ§
h st = size $ st ^. presses

pause = False

mpauseId = if pause then pauseId else id

h' :: St -> ‚Ñ§
h' st
  | any (‚â° True) [dirpad |? rP ‚àà [Nothing, Just (#"." ‚ñ°)] | rP <- st ^. rsP] = Íùè
  | numpad |? (st ^. rnumP) ‚àà [Nothing, Just (#"." ‚ñ°)] = Íùè
  | otherwise =
      traceShow ("h' start", st) $
        let rnum = numpad |! (st ^. rnumP)
         in case numpaths |! (rnum, st ^. target) of
              -- i.e. how many presses already + how many to have the robots input us to target plus an A press
              [] -> traceShow ("no paths", toChar rnum, toChar (st ^. target)) $ Íùè
              paths ->
                mpauseId ‚àò traceShow ("h' rnum", paths, dbg st) $
                  size (st ^. presses) + run do
                    sizes <- forM paths $ \path -> do
                      cost <- robocost .$. (0, (path <> [(#A ‚ñ°)]))
                      traceShow ("h' path", path, cost) $ return cost
                    traceShow ("minimum top", sizes) $
                      if null sizes then traceShow ("no path top", paths) (return Íùè) else return (minimum sizes)
  where
    dbg st = (st ^. target, st ^. rnumP, st ^. rsP)
    robocost (layer, path)
      | layer ‚â° (size (st ^. rsP)) =
          traceShow ("robocost final layer", size path, path, dbg st) $
            return (size path)
      | otherwise = do
          let rP = dirpad |! ((st ^. rsP) !! layer)
          -- the inputs that make this robot input the path
          -- i.e. from current pos to first pos, an A press, repeatas to take including the button presses between
          let segments = zip (rP : path) path
          mpauseId ‚àò traceShow ("robocost layer", layer, path, segments, dbg st) $ do
            segmentCosts <- forM segments $ \(from, to) -> do
              let segmentPaths =
                    mpauseId ‚àò traceShow ("robocost segment; layer", layer, (from, to), dbg st) $
                      (dirpaths |! (from, to))
              let segmentPathCost segmentPath =
                    mpauseId ‚àò traceShow ("robocost segment; layer", layer, (from, to), segmentPaths, dbg st) $
                      robocost .$. (layer + 1, segmentPath <> [(#A ‚ñ°)])
              sizes <- sequence $ segmentPathCost <$> segmentPaths
              mpauseId ‚àò traceShow ("robocost segment; layer", layer, (from, to), sizes, dbg st) $
                traceShow ("minimum layer", layer, sizes) $
                  if null sizes then return Íùè else return (minimum sizes)
            return $ sum segmentCosts

push :: St -> St
push st = go √∏ (mkQ‚ÇÅ h st)
  where
    -- in traceShow ("robocost", layer, toChar <$> path) $
    --     minimum $
    --       (\path -> robocost (layer + 1) (path <> [(#A ‚ñ°)])) <$> paths
    key st = (st ^. rsP, st ^. rnumP)
    go seen ((cost, st) :<! q)
      | (st ^. entered) ‚â° Just (st ^. target) = st
      | key st ‚àà seen = go seen q
      | any (‚â° True) [dirpad |? rP ‚àà [Nothing, Just (#"." ‚ñ°)] | rP <- st ^. rsP] = go seen' q
      | numpad |? (st ^. rnumP) ‚àà [Nothing, Just (#"." ‚ñ°)] = go seen' q
      | incorrectEntry st = go seen' q
      | otherwise =
          traceShow (cost, size seen, st ^. target, key st) $
            go seen' $
              qAppend h [humanPress st (fromChar pressed) & presses %~ (fromChar pressed :) | pressed <- "<>^vA"] q
      where
        seen' = key st |-> seen
    humanPress :: St -> Cell Dirpad -> St
    humanPress st pressed
      | pressed ‚â° (#A ‚ñ°) = rPress 0 st
      | otherwise = st & rsP ‚àò ix‚Ñ§ 0 %~ move @‚Ñ§ (toDir¬≤ pressed) 1
    rPress :: ‚Ñ§ -> St -> St
    rPress layer st =
      let rP = (st ^. rsP) !! layer
          pressed = dirpad |! rP
       in if pressed ‚â° (#A ‚ñ°)
            then
              if layer ‚â° (size (st ^. rsP)) - 1
                then rnumPress st
                else rPress (layer + 1) st
            else
              if layer ‚â° (size (st ^. rsP)) - 1
                then st & rnumP %~ move @‚Ñ§ (toDir¬≤ pressed) 1
                else st & rsP ‚àò ix‚Ñ§ (layer + 1) %~ move @‚Ñ§ (toDir¬≤ pressed) 1
    rnumPress :: St -> St
    rnumPress st =
      let pressed = numpad |! (st ^. rnumP)
       in st & entered ?~ pressed
    incorrectEntry :: St -> ùîπ
    incorrectEntry st = case st ^. entered of
      Nothing -> False
      Just entered -> entered ‚â¢ (st ^. target)

onecode :: Text -> ‚Ñ§ -> ‚Ñ§
onecode s = complexity [s]

complexity :: [Text] -> ‚Ñ§ -> ‚Ñ§
complexity buttons layers =
  buttons
    & fmap toButtonsValue
    & fmap
      ( \(buttons, value) ->
          traceShow (buttons, value) $
            let (ps, _) =
                  foldl'
                    -- (\(ps, rnumP') button -> let st = push (initSt layers & rnumP .~ rnumP' & target .~ button) in (ps + size (st ^. presses), st ^. rnumP))
                    ( \(ps, rnumP') button ->
                        traceShow ("in fold", ps, rnumP', button) $
                          ( ps
                              + h'
                                ( St
                                    { _presses = [],
                                      _entered = Nothing,
                                      _target = button,
                                      _rnumP = rnumP',
                                      _rsP = replicate (fromIntegral layers) (dirpad |!> (#A ‚ñ°))
                                    }
                                ),
                            numpad |!> button
                          )
                    )
                    (0, numpad |!> (#A ‚ñ°))
                    buttons
             in ps ‚ãÖ value
      )
    & sum

part1 :: ‚Ñ§
part1 = complexity (lines $(aoc 21)) 2

part2 :: ‚Ñ§
part2 = complexity (lines $(aoc 21)) 25
